import streamlit as st
from PIL import Image
from openai import OpenAI
import os
import time
import spotipy
from spotipy.oauth2 import SpotifyOAuth
import webbrowser
import re # Needed for the improved parse_playlist function


def parse_playlist(text):
    parsed = []
    lines = text.strip().splitlines()
    for line in lines:
        # Step 1: Remove common list prefixes (e.g., "1. ", "2) ", "- ")
        line = re.sub(r'^\s*[\d\.\-]+[\s\)]*', '', line).strip()

        # Step 2: Try to split by ' ‚Äì ' (en dash) first
        if "‚Äì" in line:
            parts = line.split("‚Äì", 1)
        # Step 3: Fallback to splitting by ' - ' (hyphen)
        elif "-" in line:
            parts = line.split("-", 1)
        else:
            # If no common delimiter found, skip this line
            continue

        # Ensure we got two parts (artist and track)
        if len(parts) == 2:
            artist = parts[0].strip()
            track = parts[1].strip()

            # Step 4: Clean up any residual non-alphanumeric characters at start/end of artist/track
            artist = re.sub(r'^[^\w\s]+|[^\w\s]+$', '', artist).strip()
            track = re.sub(r'^[^\w\s]+|[^\w\s]+$', '', track).strip()

            # Ensure both artist and track are not empty after cleaning
            if artist and track:
                parsed.append({"artist": artist, "track": track})
    return parsed


# --- NEW: Improved Track Search Function ---
def search_track(sp, artist, track):
    # Try multiple search strategies to increase success rate
    search_queries = [
        f"track:{track} artist:{artist}",  # 1. Exact match (strict)
        f"{track} {artist}",              # 2. Broader search (title + artist)
        f"track:{track}",                  # 3. Title only
        f"artist:{artist}"                 # 4. Artist only
    ]

    for query in search_queries:
        try:
            results = sp.search(q=query, type="track", limit=1)
            if results and results['tracks']['items']:
                # Found a match, return the URI
                return results['tracks']['items'][0]['uri']
        except Exception as e:
            # Catch API errors during search but don't stop the whole process for one query
            # You could log this error if needed for debugging, but not show it to user
            pass # Continue trying other queries or fail silently for this attempt

    return None # Return None if no URI was found after all attempts


# --- LOAD GENRES AND MOODS FROM FILES ---
# Assuming 'genres.csv' is in the same directory as main.py
try:
    with open("genres.csv", "r", encoding="utf-8") as f:
        broad_genres = [line.strip() for line in f if line.strip()]
except FileNotFoundError:
    st.error("Genre list file (genres.csv) not found! Please ensure it's in the same directory.")
    broad_genres = ["Pop", "Rock", "Electronic"] # Fallback genres if file is missing

# Assuming 'moods.csv' is in the same directory as main.py
try:
    with open("moods.csv", "r", encoding="utf-8") as f:
        mood_options = [line.strip() for line in f if line.strip()]
except FileNotFoundError:
    st.error("Mood list file (moods.csv) not found! Please ensure it's in the same directory.")
    mood_options = ["Upbeat", "Chill", "Melancholic"] # Fallback moods if file is missing


# --- PAGE CONFIG ---
st.set_page_config(page_title="Plailista ‚Äì AI Playlist Generator", page_icon="üéµ", layout="centered")

# --- CUSTOM CSS FOR HEADER COLORS ---
st.markdown(
    """
    <style>
    /* Target the H1 element generated by st.title */
    [data-testid="stHeader"] h1,
    .stApp h1 {
        color: #1DB954 !important; /* Spotify green, forced with !important */
    }

    /* Target the H3 element which st.subheader renders as, or check for H2 if it's used */
    [data-testid="stHeader"] h3,
    .stApp h3,
    [data-testid="stHeader"] h2,
    .stApp h2 {
        color: #1DB954 !important; /* Spotify green, forced with !important */
    }
    </style>
    """,
    unsafe_allow_html=True
)
# --- END CUSTOM CSS ---

# --- HEADER ---
st.title("üß†üéµ Plailista")
st.subheader("Playlists from the Aether, Delivered to Spotify")

# --- PLACEHOLDER FOR IMAGES ---
# st.image("logo.png", width=120)
# st.image("einstein_dancing.gif", width=300)

# --- INFO SECTION ---
with st.expander("‚ÑπÔ∏è What‚Äôs This?", expanded=True):
    st.markdown("""
**Plailista** is a simple tool that lets you generate Spotify playlists using the power of AI.
Describe your mood, vibe, or favorite artist, and it‚Äôll spin up a playlist and send it directly to your Spotify account.

**How to Use**
1. Select your vibe or paste a list
2. Log in to your Spotify account
3. Hit ‚ÄúCreate Playlist‚Äù ‚Äî and done

---
**Note from the Creator**
This is a weekend project built by Terence Reis. Hope you‚Äôll enjoy it.
_If you don‚Äôt‚Ä¶ well, did you catch the part about it being a weekend project?_ üòÖ
""")

# --- PROMPT BUILDER ---
st.header("üé∂ Generate a Playlist")
col1, col2 = st.columns(2)

with col1:
    # --- MOOD SELECTBOX USES mood_options ---
    mood = st.selectbox("Mood", mood_options)
    # --- GENRE SELECTBOX USES broad_genres ---
    genre = st.selectbox("Genre", broad_genres)

with col2:
    artist = st.text_input("Anchor Artist", "Lucinda Williams")
    num_songs = st.select_slider("Number of Songs", options=[10, 30, 50], value=30)

if st.button("Generate Playlist üé∂"):
    prompt = f"""
    Generate a {num_songs}-track playlist in the genre of {genre}, with a {mood} vibe, inspired by the style of {artist}.
    Format it as one line per song in this format: Artist ‚Äì Track Title
    Only include real songs and artists.

    Here are a few examples:
    Lucinda Williams ‚Äì Drunken Angel
    Waylon Jennings ‚Äì Honky Tonk Heroes
    Townes Van Zandt ‚Äì Pancho and Lefty
    Cowboy Junkies ‚Äì Misguided Angel
    Ray Wylie Hubbard ‚Äì Snake Farm
    """

    with st.spinner("üéß Generating playlist..."):
        try:
            client = OpenAI(api_key=st.secrets["openai"]["api_key"])
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.8
            )
            output = response.choices[0].message.content
            parsed = parse_playlist(output)

            st.session_state["generated_playlist"] = output
            st.session_state["parsed_playlist"] = parsed

            st.success("‚úÖ Playlist generated!")
        except Exception as e:
            st.error(f"OpenAI error: {str(e)}")


# --- OR MANUAL INPUT ---
st.markdown("---")
st.subheader("üìã Paste Your Own Playlist (or edit the example)")

default_example = """Lucinda Williams ‚Äì Drunken Angel
Waylon Jennings ‚Äì Honky Tonk Heroes
Townes Van Zandt ‚Äì Pancho and Lefty
Cowboy Junkies ‚Äì Misguided Angel
Ray Wylie Hubbard ‚Äì Snake Farm"""

playlist_input = st.text_area(
    "Format: Artist ‚Äì Track",
    value=st.session_state.get("generated_playlist", default_example),
    height=200
)


# --- AUTH & PLAYLIST CREATION SECTION ---
st.markdown("---")
st.subheader("üîê Connect & Create")

# Playlist Name input is now always visible as requested
playlist_name = st.text_input("Playlist Name", "Americana Starter Pack")


# --- SPOTIFY AUTHENTICATION HANDLING ---
if "sp_oauth" not in st.session_state:
    st.session_state["sp_oauth"] = SpotifyOAuth(
        client_id=st.secrets["spotify"]["client_id"],
        client_secret=st.secrets["spotify"]["client_secret"],
        redirect_uri=st.secrets["spotify"]["redirect_uri"],
        scope="playlist-modify-public"
    )

code = st.query_params.get("code")

if code:
    try:
        token_info = st.session_state["sp_oauth"].get_access_token(code)
        st.session_state["token_info"] = token_info
        st.session_state["sp"] = spotipy.Spotify(auth=token_info['access_token'])
        st.success(f"üîê Authenticated as {st.session_state['sp'].current_user()['display_name']}") # Show success immediately
        st.query_params.clear() # Clear the code from the URL
        st.rerun() # Rerun to remove the code from the URL and update the UI
    except Exception as e:
        st.error(f"Error getting Spotify token: {e}")
        st.session_state["token_info"] = None
        st.session_state["sp"] = None
elif "token_info" in st.session_state:
    is_token_valid = st.session_state["sp_oauth"].validate_token(st.session_state["token_info"])
    if is_token_valid:
        st.session_state["sp"] = spotipy.Spotify(auth=st.session_state["token_info"]["access_token"])
        st.success(f"üîê Authenticated as {st.session_state['sp'].current_user()['display_name']}") # Show success if token is already valid
    else:
        # --- DISPLAY THE AUTHENTICATE BUTTON (AS A STYLED LINK) ---
        auth_url = st.session_state["sp_oauth"].get_authorize_url()
        st.markdown(
            f"""
            <a href="{auth_url}" target="_blank" style="
                display: inline-block;
                background-color: #1DB954; /* Streamlit's default red button color */
                color: white;
                padding: 0.75rem 1rem;
                border-radius: 0.25rem;
                text-decoration: none;
                font-weight: 600;
                cursor: pointer;
                border: none;
                line-height: 1.6;
                text-align: center;
                /* Add any other styling to match Streamlit buttons */
            ">üîê Authenticate with Spotify</a>
            """,
            unsafe_allow_html=True
        )
        st.info("Please complete authentication in the new tab.") # Optional info message
else:
    # --- DISPLAY THE AUTHENTICATE BUTTON (AS A STYLED LINK) when no token info is present ---
    auth_url = st.session_state["sp_oauth"].get_authorize_url()
    st.markdown(
        f"""
        <a href="{auth_url}" target="_blank" style="
            display: inline-block;
            background-color: #1DB954; /* Streamlit's default red button color */
            color: white;
            padding: 0.75rem 1rem;
            border-radius: 0.25rem;
            text-decoration: none;
            font-weight: 600;
            cursor: pointer;
            border: none;
            line-height: 1.6;
            text-align: center;
            /* Add any other styling to match Streamlit buttons */
        ">üîê Authenticate with Spotify</a>
        """,
        unsafe_allow_html=True
    )
    st.info("Please complete authentication in the new tab.") # Optional info message


# --- CREATE PLAYLIST ON SPOTIFY BUTTON (ALWAYS VISIBLE, will error if not authenticated) ---
if st.button("‚ûï Create Playlist on Spotify"):
    if "parsed_playlist" not in st.session_state or not st.session_state["parsed_playlist"]:
        st.warning("Please generate a playlist or paste one above before creating it on Spotify.")
    else:
        with st.spinner("Creating playlist on Spotify..."):
            try:
                user = st.session_state["sp"].current_user() # This line will fail if not authenticated
                user_id = user['id']
                playlist = st.session_state["sp"].user_playlist_create(user_id, playlist_name, public=True)
                st.success(f"üéâ Playlist '{playlist_name}' created successfully!")

                # --- Counters for found/not found songs ---
                found_count = 0
                not_found_count = 0
                track_uris = []

                for item in st.session_state["parsed_playlist"]:
                    # Use the search_track function
                    uri = search_track(st.session_state["sp"], item['artist'], item['track'])
                    if uri:
                        track_uris.append(uri)
                        found_count += 1
                    else:
                        not_found_count += 1

                # --- Display summary messages ---
                if found_count > 0:
                    st.success(f"‚úÖ Found {found_count} out of {found_count + not_found_count} songs.")
                if not_found_count > 0:
                    st.warning(f"‚ö†Ô∏è Could not find {not_found_count} songs. Please check your prompt or manual input for these tracks.")

                # If no songs were found at all, we should warn before trying to add to playlist
                if found_count == 0 and not_found_count > 0: # All songs requested were not found
                    st.warning("No songs were found to add to the playlist based on your request.")


                if track_uris:
                    chunk_size = 100
                    for i in range(0, len(track_uris), chunk_size):
                        chunk = track_uris[i:i + chunk_size]
                        st.session_state["sp"].playlist_add_items(playlist['id'], chunk)
                    st.success(f"Added {len(track_uris)} songs to '{playlist_name}'!")
                else:
                    if found_count == 0: # Ensure this only shows if nothing was found
                        st.warning("No songs were found to add to the playlist.")

            except Exception as e:
                st.error(f"Error creating playlist: {e}. Please ensure you are authenticated with Spotify.")
                # This check ensures the auth button (as a styled link) appears if needed after an error
                if "sp" not in st.session_state or st.session_state["sp"] is None:
                    auth_url = st.session_state["sp_oauth"].get_authorize_url()
                    st.markdown(
                        f"""
                        <a href="{auth_url}" target="_blank" style="
                            display: inline-block;
                            background-color: #1DB954; /* Streamlit button red */
                            color: white;
                            padding: 0.75rem 1rem;
                            border-radius: 0.25rem;
                            text-decoration: none;
                            font-weight: 600;
                            cursor: pointer;
                            border: none;
                            line-height: 1.6;
                            text-align: center;
                        ">üîê Authenticate with Spotify (after error)</a>
                        """,
                        unsafe_allow_html=True
                    )
                    st.info("Please complete authentication in the new tab.")


# --- Authentication status message (re-added for clarity) ---
# This block should align directly with the 'CREATE PLAYLIST ON SPOTIFY BUTTON' block above it
if "sp" in st.session_state and st.session_state["sp"] is not None:
    try:
        user_display_name = st.session_state["sp"].current_user()['display_name']
        st.success(f"üîê Authenticated as {user_display_name}")
    except Exception as e:
        st.error(f"Authentication session expired or invalid. Please re-authenticate: {e}")
        st.session_state["token_info"] = None
        st.session_state["sp"] = None
        st.rerun()
else:
    # This is the final authentication message at the bottom of the UI
    auth_url = st.session_state["sp_oauth"].get_authorize_url()
    st.info("Please authenticate with Spotify to fully utilize features.")
    st.markdown(f"""
        <p>If you weren't automatically redirected, please click <a href="{auth_url}" target="_blank">Open Spotify</a> to authenticate directly.</p>
        <p style='font-size: small; color: grey;'>This will open in a new tab.</p>
    """, unsafe_allow_html=True)